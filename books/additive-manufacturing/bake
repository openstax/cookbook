#!/usr/bin/env ruby

# frozen_string_literal: true

require 'bundler/inline'
require_relative '../../bake_helper'

gemfile do
  gem 'openstax_kitchen', \
      ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : KITCHEN_VERSIONS[:additive_manufacturing]
  gem 'slop', '4.8.2'
  gem 'byebug'
end

recipe = Kitchen::BookRecipe.new(book_short_name: :additive_manufacturing) do |doc|
  include Kitchen::Directions

  book = doc.book
  metadata = book.metadata

  # Some stuff just goes away
  book.search('cnx-pi').trash

  BakePreface.v1(book: book)

  book.pages('$.preface').each do |page|
    page.figures.each do |figure|
      BakeFigure.v1(figure: figure,
                    number: figure.count_in(:page).to_s)
    end
  end

  BakeChapterTitle.v1(book: book)
  BakeChapterIntroductions.v2(
    book: book, strategy_options: {
      strategy: :add_objectives, bake_chapter_outline: true, introduction_order: :v1
    }
  )

  BakeUnclassifiedNotes.v1(book: book, bake_exercises: true)

  AddInjectedExerciseId.v1(book: book)

  book.chapters.each do |chapter|
    BakeNonIntroductionPages.v1(chapter: chapter)

    chapter.figures.each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}")
    end

    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}")
    end

    BakeChapterGlossary.v1(chapter: chapter, metadata_source: metadata)

    eoc_with_exercise = %w[review-questions case-questions free-response]
    eoc_with_exercise.each do |section_key|
      MoveCustomSectionToEocContainer.v1(
        chapter: chapter,
        metadata_source: metadata,
        container_key: section_key,
        uuid_key: ".#{section_key}",
        section_selector: "section.#{section_key}"
      ) do |section|
        RemoveSectionTitle.v1(section: section)
      end
    end

    selectors = 'section.review-questions, section.case-questions, section.free-response'

    chapter.composite_pages.search(selectors).injected_questions.each do |question|
      BakeInjectedExerciseQuestion.v1(question: question, number: question.count_in(:chapter))
    end

    BakeAllChapterSolutionsTypes.v1(
      chapter: chapter,
      within: chapter.search(selectors),
      metadata_source: metadata
    )
  end

  BakeFootnotes.v1(book: book)
  BakeIndex.v1(book: book)
  BakeCompositePages.v1(book: book)
  BakeLinkPlaceholders.v1(book: book)
  BakeToc.v1(book: book)
end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: [recipe],
  output_file: opts[:output]
)
