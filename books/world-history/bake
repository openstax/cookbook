#!/usr/bin/env ruby

# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  # gem 'openstax_kitchen',
  #     github: 'openstax/kitchen',
  #     ref: '2437abb8b3100f46941befffa6e541d521c2c571'
  gem 'openstax_kitchen', ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : '13.0.0'

  gem 'slop', '4.8.2'
  gem 'byebug'
end

recipe = Kitchen::BookRecipe.new(book_short_name: :world_history) do |doc|
  include Kitchen::Directions

  book = doc.book
  metadata = book.metadata

  # Some stuff just goes away
  book.search('cnx-pi').trash

  AddInjectedExerciseId.v1(book: book)
  book.search('div[data-type="injected-exercise"]').each do |exercise|
    BakeInjectedExercise.v1(exercise: exercise)
  end

  BakePreface.v1(book: book)
  # preface = book.pages('$.preface').first

  BakeChapterTitle.v1(book: book)
  BakeChapterIntroductions.v2(
    book: book, strategy_options: {
      strategy: :add_objectives,
      bake_chapter_outline: true,
      introduction_order: :v1
    }
  )

  BakeUnitTitle.v1(book: book)

  book.chapters.each do |chapter|

    # Eoc sections
    BakeChapterGlossary.v1(chapter: chapter, metadata_source: metadata)
    MoveCustomSectionToEocContainer.v1(
      chapter: chapter,
      metadata_source: metadata,
      container_key: 'section-summary',
      uuid_key: '.section-summary',
      section_selector: 'section.section-summary'
    ) do |section|
      RemoveSectionTitle.v1(section: section)
      title = EocSectionTitleLinkSnippet.v1(page: section.ancestor(:page))
      section.prepend(child: title)
    end

    eoc_sections = %w[review-questions
                      check-understanding
                      reflection-questions
                      visual-questions
                      making-connections
                      thought-provokers
                      source-questions]

    eoc_sections.each do |section_key|
      MoveCustomSectionToEocContainer.v1(
        chapter: chapter,
        metadata_source: metadata,
        container_key: section_key,
        uuid_key: ".#{section_key}",
        section_selector: "section.#{section_key}"
      ) do |section|
        RemoveSectionTitle.v1(section: section)
      end
    end

    # # Exercises
    # exercise_sections = %w[section.making-connections
    #                        section.thought-provokers
    #                        section.source-questions]

    # chapter.pages.search(exercise_sections).each do |section|
    #   section.exercises.each do |exercise|
    #     BakeNumberedExercise.v1(exercise: exercise,
    #                             suppress_solution_if: true,
    #                             number: exercise.count_in(:chapter))
    #   end
    # end

    # injected_exercises = %w[review-questions
    #                         check-understanding
    #                         reflection-questions
    #                         visual-questions
    #                         making-connections
    #                         thought-provokers
    #                         source-questions]

    # chapter.pages.search(injected_exercises).injected_questions.each do |question|
    #   BakeInjectedExerciseQuestion.v1(question: question, number: question.count_in(:chapter))
    # end

    # Bake both kinds of exercise
    chapter \
      .search('div.os-eoc') \
      .search_with(Kitchen::ExerciseElementEnumerator, Kitchen::InjectedQuestionElementEnumerator) \
      .each_with_index do |exercise, index|
      if exercise.instance_of?(Kitchen::ExerciseElement)
        BakeNumberedExercise.v1(exercise: exercise, number: index + 1, suppress_solution_if: true)
        # BakeFirstElements.v1(within: exercise)
      else
        BakeInjectedExerciseQuestion.v1(question: exercise, number: index + 1)
      end
    end

    # chapter.pages.each do |page|
    #   page.search('div[data-type="media"]').each do |media_container|
    #     if !media_container.parent[:'data-type'] == 'note'
    #       BakeIframes.v1(outer_element: media_container)
    #     end
    #   end
    #   page.search('section').injected_questions.each do |question|
    #     BakeInjectedExerciseQuestion.v1(question: question, number: question.count_in(:section))
    #   end
    # end

    BakeLearningObjectives.v2(chapter: chapter, add_title: false)
    BakeNonIntroductionPages.v1(chapter: chapter)

    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}")
    end

    # chapter.figures(only: :figure_to_bake_without_count?).each do |figure|
    #   BakeFigure.v1(
    #     figure: figure
    #   )
    # end

    # chapter.figures(only: :figure_to_bake_and_count?).each do |figure|
    #   BakeFigure.v1(
    #     figure: figure,
    #     number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}"
    #   )
    # end

    chapter.figures('$:not(.unnumbered)').each do |figure|
      BakeFigure.v1(
        figure: figure,
        number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}"
      )
    end
  end

  BakeAutotitledNotes.v1(book: book, classes: %w[own-words
                                                 dueling-voices
                                                 beyond-book
                                                 past-present])

  BakeAutotitledNotes.v1(book: book, classes: %w[link-to-learning], bake_subtitle: false)

  BakeStepwise.v1(book: book)
  BakeUnnumberedTables.v1(book: book)
  book.pages('$.appendix').each do |page|
    appendix_letter = [*('A'..'Z')][page.count_in(:book) - 1]
    BakeAppendix.v1(page: page, number: appendix_letter)

    page.figures('$:not(.unnumbered)').each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{appendix_letter}#{figure.count_in(:page)}")
    end
    page.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{appendix_letter}#{table.count_in(:page)}")
    end
  end
  BakeIndex.v1(book: book)
  BakeCompositePages.v1(book: book)
  BakeCompositeChapters.v1(book: book)
  BakeFootnotes.v1(book: book)
  BakeLinkPlaceholders.v1(book: book)
  BakeToc.v1(book: book)
end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: [recipe],
  output_file: opts[:output]
)
