#!/usr/bin/env ruby

# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  gem 'openstax_kitchen', ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : '11.0.0'
  gem 'slop', '4.8.2'
  gem 'byebug'
end

recipe = Kitchen::BookRecipe.new(book_short_name: :contemporary_math) do |doc|
  include Kitchen::Directions

  book = doc.book
  metadata = book.metadata

  book.search('cnx-pi').trash

  BakePreface.v1(book: book)
  BakeChapterIntroductions.v1(book: book)
  BakeChapterTitle.v1(book: book)
  BakeNumberedNotes.v1(book: book, classes: %w[your-turn])
  BakeUnclassifiedNotes.v1(book: book)
  note_classes = %w[people-mathematics who-knew tech-check check-point video work-out]
  BakeAutotitledNotes.v1(book: book, classes: note_classes)
  book.search('div.your-turn div[data-type="solution"]').each do |solution|
    solution.tables.each do |table|
      table.add_class('unnumbered')
    end
    solution.figures.each do |figure|
      figure.add_class('unnumbered')
    end
  end
  BakeUnnumberedTables.v1(book: book)

  answer_key = BookAnswerKeyContainer.v1(book: book)
  book.chapters.each do |chapter|
    BakePageAbstracts.v1(chapter: chapter)
    BakeNonIntroductionPages.v1(chapter: chapter)

    BakeChapterSectionExercises.v1(chapter: chapter, trash_title: true)

    chapter_summary = \
      ChapterReviewContainer.v1(chapter: chapter, metadata_source: metadata,
                                klass: 'chapter-summary')
    eoc_sections = %w[key-terms key-concepts eoc-videos formula-review]
    eoc_sections.each do |section_key|
      MoveCustomSectionToEocContainer.v1(
        chapter: chapter,
        metadata_source: metadata,
        container_key: section_key,
        uuid_key: ".#{section_key}",
        section_selector: "section.#{section_key}",
        append_to: chapter_summary,
        wrap_section: true, wrap_content: true
      ) do |section|
        RemoveSectionTitle.v1(section: section)
        title = EocSectionTitleLinkSnippet.v1(page: section.ancestor(:page))
        section.prepend(child: title)
      end
    end
    MoveCustomSectionToEocContainer.v1(
      chapter: chapter,
      metadata_source: metadata,
      container_key: 'projects',
      uuid_key: '.projects',
      section_selector: 'section.projects',
      append_to: chapter_summary
    ) do |section|
      RemoveSectionTitle.v1(section: section)
    end
    eoc_with_exercise = %w[chapter-review chapter-test]
    eoc_with_exercise.each do |section_key|
      MoveCustomSectionToEocContainer.v1(
        chapter: chapter,
        metadata_source: metadata,
        container_key: section_key,
        uuid_key: ".#{section_key}",
        section_selector: "section.#{section_key}",
        append_to: chapter_summary
      ) do |section|
        ChangeSubsectionTitleTag.v1(section: section)
        RemoveSectionTitle.v1(section: section)
      end
    end
    chapter.pages.search('section.section-exercises').exercises.each do |exercise|
      BakeNumberedExercise.v1(exercise: exercise, number: exercise.count_in(:page))
    end

    chapter.search('section.chapter-review').exercises.each do |exercise|
      BakeNumberedExercise.v1(exercise: exercise, number: exercise.count_in(:chapter))
    end

    chapter.search('section.chapter-test').exercises.each do |exercise|
      BakeNumberedExercise.v1(exercise: exercise, number: exercise.count_in(:chapter))
    end

    chapter.figures(only: :figure_to_bake?).each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}")
    end
    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}")
    end
    chapter.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{chapter.count_in(:book)}.#{example.count_in(:chapter)}",
                     title_tag: 'h3')
    end

    chapter.search('div[data-type="exercise"]').each do |exercise|
      # Classes added: has-first-element
      BakeFirstElements.v1(within: exercise)
    end

    MoveSolutionsToAnswerKey.v1(chapter: chapter, metadata_source: metadata,
                                strategy: :contemporary_math, append_to: answer_key)
  end

  BakeMathInParagraph.v1(book: book)
  BakeIndex.v1(book: book)
  BakeCompositePages.v1(book: book)
  BakeCompositeChapters.v1(book: book)
  BakeToc.v1(book: book)
  BakeLinkPlaceholders.v1(book: book)
end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: [recipe],
  output_file: opts[:output]
)
