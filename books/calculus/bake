#!/usr/bin/env ruby

# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  gem 'openstax_kitchen', ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : '2.0.0'
  gem 'slop', '4.8.2'
  gem 'byebug'
end

recipe = Kitchen::BookRecipe.new(book_short_name: :calculus) do |doc|
  include Kitchen::Directions

  book = doc.book

  # Some stuff just goes away
  book.search('cnx-pi').trash
  BakePreface.v1(book: book)
  BakeUnclassifiedNotes.v1(book: book)

  book.chapters.each do |chapter|
    chapter.notes('$.theorem').each do |theorem|
      theorem['use-subtitle'] = true
    end
  end

  BakeAutotitledNotes.v1(book: book, classes: %w[media-2 problem-solving project])
  BakeNumberedNotes.v1(book: book, classes: %w[theorem checkpoint])

  book.chapters.each do |chapter|
    chapter_review = BakeChapterReview.v1(
      chapter: chapter,
      metadata_source: book.metadata
    )

    BakeChapterGlossary.v1(
      chapter: chapter, metadata_source: book.metadata, append_to: chapter_review
    )
    BakeChapterKeyEquations.v1(
      chapter: chapter, metadata_source: book.metadata, append_to: chapter_review
    )
    BakeChapterKeyConcepts.v1(
      chapter: chapter, metadata_source: book.metadata, append_to: chapter_review
    )
    BakeChapterReviewExercises.v1(
      chapter: chapter, metadata_source: book.metadata,
      append_to: chapter_review, klass: 'review-exercises'
    )
    BakeChapterSectionExercises.v1(chapter: chapter)

    # This is somewhat backwards from how chemistry does it.  Just above we moved all of the review
    # exercises to the end of the chapter.  Now, with all of the non-checkpoint exercises in the
    # correct order, we bake them (the "in place" stuff) and number them.
    # THIS IS HOW WE GET SECTION EXERCISES AND REVIEW EXERCISES NUMBERED IN ORDER
    chapter.search('.section-exercises, .review-exercises').exercises.each do |exercise|
      BakeNumberedExercise.v1(exercise: exercise, number: exercise.count_in(:chapter))
    end

    # chapter.notes('$.theorem').each do |theorem|
    #   BakeTheorem.v1(theorem: theorem,
    #                  number: "#{chapter.count_in(:book)}.#{theorem.count_in(:chapter)}")
    # end

    # chapter.notes('$.checkpoint').each do |checkpoint|
    #   BakeCheckpoint.v1(checkpoint: checkpoint,
    #                     number: "#{chapter.count_in(:book)}.#{checkpoint.count_in(:chapter)}")
    # end
  end

  BakeChapterIntroductions.v1(book: book)
  BakeChapterTitle.v1(book: book)

  book.chapters.each do |chapter|
    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}")
    end

    chapter.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{chapter.count_in(:book)}.#{example.count_in(:chapter)}",
                     title_tag: 'h3')
    end

    chapter.figures.each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}")
    end

    BakeNonIntroductionPages.v1(chapter: chapter)
  end

  book.pages('$.appendix').each do |page|
    appendix_letter = [*('A'..'Z')][page.count_in(:book) - 1]

    page.figures.each do |figure|
      BakeFigure.v1(figure: figure, number: "#{appendix_letter}#{figure.count_in(:page)}")
    end

    page.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table, number: "#{appendix_letter}#{table.count_in(:page)}")
    end

    page.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{appendix_letter}#{example.count_in(:page)}",
                     title_tag: 'div')
    end

    BakeAppendix.v1(page: page, number: appendix_letter)
  end

  # Ok so here we go, now let's move the solutions to the end of the book.  As you know,
  # unlike Chemistry, Calculus has an "Answer Key" composite chapter after the appendices.
  # Similar to how we made a chapter review composite chapter above, let's make one
  # for the Answer Key and then iterate over the chapters, making the chapter's answer key
  # composite page which we append to the Answer Key composite chapter.

  # New direction that makes the composite chapter Answer Key, appends it at the end of the
  # book, then returns it
  book_answer_key = BakeBookAnswerKey.v1(book: book)

  book.chapters.each do |chapter|
    BakeChapterAnswerKey.v1(chapter: chapter,
                            metadata_source: book.metadata,
                            strategy: :calculus,
                            append_to: book_answer_key)
  end

  BakeStepwise.v1(book: book)
  BakeUnnumberedTables.v1(book: book)

  book.pages.each do |page|
    # fix table captions
    page.search('.section-exercises').each do |section|
      section.search('.os-problem-container > .os-table:first-child').each do |table|
        table.add_class('first-element')
        table.parent.add_class('has-first-element')
      end

      section.search('.os-problem-container > [data-type="media"]:first-child').each do |img|
        img.add_class('first-element')
        img.parent.add_class('has-first-element')
      end
    end

    page.search('div.os-table div.os-caption-container').each do |caption|
      caption_text = caption.first('span.os-caption [data-type="title"]')
      next unless caption_text.present?

      caption_text.add_class('os-title').name = 'span'
      divider_aux = caption.first('span.os-divider')
      divider_aux.append(sibling:
        <<~HTML
          #{caption_text&.cut}
        HTML
      )
    end
  end

  BakeMathInParagraph.v1(book: book)
  BakeIndex.v1(book: book)
  BakeCompositePages.v1(book: book)
  BakeFootnotes.v1(book: book)
  BakeCompositeChapters.v1(book: book)
  BakeToc.v1(book: book)

  book.chapters.each do |chapter|
    chapter.search('div[data-type="equation"]:not(.unnumbered)').each do |equation|
      equation.append(child:
        <<~HTML
          <div class="os-equation-number">
            <span class="os-number">(#{chapter.count_in(:book)}.#{equation.count_in(:chapter)})</span>
          </div>
        HTML
      )
    end

    BakePageAbstracts.v1(chapter: chapter)
    BakePageAbstracts.v2(chapter: chapter)
  end

  BakeLinkPlaceholders.v1(book: book)
end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: recipe,
  output_file: opts[:output]
)
