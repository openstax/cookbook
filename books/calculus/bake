#!/usr/bin/env ruby

# frozen_string_literal: true

require 'bundler/inline'
require_relative '../../bake_helper'

gemfile do
  gem 'openstax_kitchen', \
      ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : VERSIONS[:calculus]
  gem 'slop', '4.8.2'
  gem 'byebug'
end

recipe = Kitchen::BookRecipe.new(book_short_name: :calculus) do |doc|
  include Kitchen::Directions

  book = doc.book
  book_metadata = book.metadata

  # Some stuff just goes away
  book.search('cnx-pi').trash

  BakePreface.v1(book: book)
  BakeUnclassifiedNotes.v1(book: book)

  book.notes('$.theorem').each { |theorem| theorem['use-subtitle'] = true }

  BakeAutotitledNotes.v1(book: book, classes: %w[media-2 problem-solving project])
  BakeNumberedNotes.v1(book: book, classes: %w[theorem checkpoint])

  book.chapters.each do |chapter|
    chapter_review = ChapterReviewContainer.v1(
      chapter: chapter,
      metadata_source: book_metadata
    )

    BakeChapterGlossary.v1(
      chapter: chapter, metadata_source: book_metadata, append_to: chapter_review
    )
    BakeChapterKeyEquations.v1(
      chapter: chapter, metadata_source: book_metadata, append_to: chapter_review
    )
    BakeChapterKeyConcepts.v1(
      chapter: chapter, metadata_source: book_metadata, append_to: chapter_review
    )
    MoveExercisesToEOC.v1(
      chapter: chapter, metadata_source: book_metadata,
      append_to: chapter_review, klass: 'review-exercises'
    )
    BakeChapterSectionExercises.v1(chapter: chapter)

    # Just above we moved the review exercises to the end of the chapter. Now that all of the
    # non-checkpoint exercises are in the right order, we bake them (the "in place" modifications)
    # and number them.
    chapter.search('section.section-exercises, section.review-exercises').exercises.each do |exercise|
      BakeNumberedExercise.v1(exercise: exercise, number: exercise.count_in(:chapter))
    end
  end

  BakeChapterIntroductions.v1(book: book)
  BakeChapterTitle.v1(book: book)

  book.chapters.each do |chapter|
    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}")
    end

    chapter.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{chapter.count_in(:book)}.#{example.count_in(:chapter)}",
                     title_tag: 'h3')
    end

    chapter.figures.each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}")
    end

    BakeNonIntroductionPages.v1(chapter: chapter)
  end

  book.pages('$.appendix').each do |page|
    appendix_letter = [*('A'..'Z')][page.count_in(:book) - 1]

    page.figures.each do |figure|
      BakeFigure.v1(figure: figure, number: "#{appendix_letter}#{figure.count_in(:page)}")
    end

    page.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table, number: "#{appendix_letter}#{table.count_in(:page)}")
    end

    page.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{appendix_letter}#{example.count_in(:page)}",
                     title_tag: 'div')
    end

    BakeAppendix.v1(page: page, number: appendix_letter)
  end

  # Here we move the solutions to the end of the book. Calculus has an "Answer Key" composite
  # chapter after the appendices. So we make the answer key, then iterate over the chapters, making
  # an answer key composite page for each chapter that we append to the answer key composite chapter
  book_answer_key = BookAnswerKeyContainer.v1(book: book)

  book.chapters.each do |chapter|
    MoveSolutionsToAnswerKey.v1(chapter: chapter,
                                metadata_source: book_metadata,
                                strategy: :calculus,
                                append_to: book_answer_key)
  end

  BakeStepwise.v1(book: book)
  BakeUnnumberedTables.v1(book: book)

  book.search('section.section-exercises', 'div.os-eob.os-solutions-container').each do |within|
    BakeFirstElements.v1(within: within)
  end

  BakeMathInParagraph.v1(book: book)
  BakeIndex.v1(book: book)
  BakeCompositePages.v1(book: book)
  BakeFootnotes.v1(book: book)
  BakeCompositeChapters.v1(book: book)
  BakeToc.v1(book: book)
  BakeEquations.v1(book: book, number_decorator: :parentheses)

  book.chapters.each do |chapter|
    BakePageAbstracts.v2(chapter: chapter)
  end

  BakeLinkPlaceholders.v1(book: book)
end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: recipe,
  output_file: opts[:output]
)
