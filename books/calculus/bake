#!/usr/bin/env ruby

require 'bundler/inline'

gemfile do
  gem 'openstax_kitchen', ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : '2.0.0'
  gem 'slop', '4.8.2'
  gem 'byebug'
end

recipe = Kitchen::BookRecipe.new(book_short_name: :calculus) do |doc|
  include Kitchen::Directions

  book = doc.book

  # Some stuff just goes away
  book.search('cnx-pi').trash

  BakePreface.v1(book: book)

  BakeNotes.v1(book: book)

  book.chapters.each do |chapter|
    # Make this new direction to make a "Chapter Review" composite chapter, it returns that element, pass
    # it to the other directions below as the element to which they should append their composite pages.
    chapter_review = BakeChapterReview.v1(chapter: chapter, metadata_source: book.metadata)

    BakeChapterGlossary.v1(chapter: chapter, metadata_source: book.metadata, append_to: chapter_review)
    BakeChapterKeyEquations.v1(chapter: chapter, metadata_source: book.metadata, append_to: chapter_review)
    BakeChapterKeyConcepts.v1(chapter: chapter, metadata_source: book.metadata, append_to: chapter_review)
    # Make this new direction to make the "Review Exercises" composite page that wraps the "review-exercises"
    # section and adds a title, then cuts it and appends it to the chapter_review element
    BakeChapterReviewExercises.v1(chapter: chapter, metadata_source: book.metadata, append_to: chapter_review)

    chapter.pages.each do |page|
      # Move this loop into a new BakeSectionExercises direction (make recipes mostly lists of directions,
      # avoid having directions guts in the recipe like this).
      page.search('section.section-exercises').each do |section|

        # This is now done later in the BakeNumberedExercise call, so not needed here
        #
        # section.exercises.each do |exercise|
        #   number = exercise.count_in(:chapter)
        #   BakeExercises.section_exercises(exercise: exercise, number: number)
        # end

        section.wrap(%(<div class="os-eos os-section-exercises-container" data-uuid-key=".section-exercises">))
        section_title = I18n.t(:section_exercises, number: "#{chapter.count_in(:book)}.#{page.count_in(:chapter)}")
        section.prepend(sibling:
          <<~HTML
            <h3 data-type="document-title">
              <span class="os-text">#{section_title}</span>
            </h3>
          HTML
        )
      end

      # This is for checkpoints only, I moved this baking logic inside BakeCheckpoint
      #
      # page.search('div[data-type="note"]').each do |note|
      #   note.exercises.each do |exercise|
      #     BakeExercises.note_exercises(exercise: exercise)
      #   end
      # end

      # Theorems don't count at the page level, I moved this code below on a chapter.notes
      # iteration (also using new BakeTheorems direction)
      #
      # page.search('div[data-type="note"].theorem').each do |theorem|
      #   number = "#{chapter.count_in(:book)}.#{theorem.count_in(:chapter)}"
      #   BakeNotes.bake_theorems(note: theorem, number: number)
      # end
    end

    # This is somewhat backwards from how chemistry does it.  Just above we moved all of the review exercises
    # to the end of the chapter.  Now, with all of the non-checkpoint exercises in the correct order, we
    # bake them (the "in place" stuff) and number them.  THIS IS HOW WE GET SECTION EXERCISES AND REVIEW
    # EXERCISES NUMBERED IN ORDER
    chapter.search('.section-exercises, .review-exercises').exercises.each do |exercise|
      BakeNumberedExercise.v1(exercise: exercise, number: exercise.count_in(:chapter))
    end

    chapter.notes('$.theorem').each do |theorem|
      BakeTheorem.v1(theorem: theorem,
                     number: "#{chapter.count_in(:book)}.#{theorem.count_in(:chapter)}")
    end

    chapter.notes('$.checkpoint').each do |checkpoint|
      BakeCheckpoint.v1(checkpoint: checkpoint,
                        number: "#{chapter.count_in(:book)}.#{note.count_in(:chapter)}")
    end
  end

  # We no longer need this b/c we did this with `BakeNumberedExercise` just above
  #
  # # bake review exercises in place
  # BakeExercises.v1(book: book, class_name: 'section.review-exercises', bake_eob: false, bake_section_title: false)


  # Ok, so I'm commenting this out b/c I'm recommending a different (but similar) approach down after
  # we bake appendices.
  #
  # # eob exercises
  # BakeExercises.eob(book: book, class_names:
  #   {
  #     'checkpoint':
  #       {
  #         classname: '.checkpoint',
  #         decimal: true,
  #         sectional: false
  #       },
  #     'section_exercises':
  #       {
  #         classname: 'section.section-exercises',
  #         decimal: false,
  #         sectional: true
  #       },
  #     'review_exercises':
  #       {
  #         classname: 'section.review-exercises',
  #         decimal: false,
  #         sectional: false
  #       }
  #   })

  BakeChapterIntroductions.v1(book: book)
  BakeChapterTitle.v1(book: book)

  book.chapters.each do |chapter|
    # This is replaced by `BakeChapterTitle` above (tho that should be plural, oh well)
    #
    # # Fix up chapter titles - TODO put this in BakeChapter
    # heading = chapter.at('h1[2]')
    # heading[:id] = "chapTitle#{chapter.count_in(:book)}"
    # heading.replace_children(with:
    #   <<~HTML
    #     <span class="os-part-text">Chapter </span>
    #     <span class="os-number">#{chapter.count_in(:book)}</span>
    #     <span class="os-divider"> </span>
    #     <span data-type="" itemprop="" class="os-text">#{heading.text}</span>
    #   HTML
    # )

    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}")
    end

    chapter.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{chapter.count_in(:book)}.#{example.count_in(:chapter)}",
                     title_tag: 'h3')

      # This exercise stuff is now moved into BakeExample
      #
      # example.exercises.each do |exercise|
      #   BakeExercises.example_exercises(exercise: exercise)
      # end
    end

    # Like I said in the review, move this code into BakePageTitle(page:, number:)
    chapter.pages('$:not(.introduction)').each do |page|
      page.search("div[data-type='description']").each(&:trash)
      page.add_class('chapter-content-module')

      title = page.title
      title.name = 'h2'
      title.replace_children(with:
        <<~HTML
          <span class="os-number">#{chapter.count_in(:book)}.#{page.count_in(:chapter)}</span>
          <span class="os-divider"> </span>
          <span data-type="" itemprop="" class="os-text">#{title.text}</span>
        HTML
      )
    end

    chapter.figures.each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}")
    end

    # Don't quite know what this is but I don't think we're going to need it
    #
    # fix numbering
    # chapter.exercises(except: ->(ex) { ex.has_ancestor?(:example) }).each do |exercise|
    #   # next unless exercise.has_class?('section.review-exercises')
    #   problem = exercise.problem
    #   solution = exercise.solution
    #   count = exercise.count_in(:chapter)

    #   puts exercise.has_ancestor?(:note)
    #   number = exercise.has_ancestor?(:note) ? "#{chapter.count_in(:book)}.#{count}" : count
    #   problem.first('.os-number')&.inner_html = number.to_s
    #   next unless solution.present?

    #   solution.first('.os-number')&.inner_html = number.to_s
    # end
  end

  book.pages('$.appendix').each do |page|
    appendix_letter = [*('A'..'Z')][page.count_in(:book) - 1]

    page.figures.each do |figure|
      BakeFigure.v1(figure: figure, number: "#{appendix_letter}#{figure.count_in(:page)}")
    end

    page.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table, number: "#{appendix_letter}#{table.count_in(:page)}")
    end

    page.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{appendix_letter}#{example.count_in(:page)}",
                     title_tag: 'div')
    end

    BakeAppendix.v1(page: page, number: appendix_letter)
  end

  # Ok so here we go, now let's move the solutions to the end of the book.  As you know,
  # unlike Chemistry, Calculus has an "Answer Key" composite chapter after the appendices.
  # Similar to how we made a chapter review composite chapter above, let's make one
  # for the Answer Key and then iterate over the chapters, making the chapter's answer key
  # composite page which we append to the Answer Key composite chapter.

  # New direction that makes the composite chapter Answer Key, appends it at the end of the
  # book, then returns it
  book_answer_key = BakeBookAnswerKey.v1(book: book)

  book.chapters.each do |chapter|
    # Make this new direction that bakes a single chapter answer key and appends it to the
    # book answer key.  At first I was thinking like you were -- how do we send in instructions
    # so that this direction can do the right thing, pulling checkpoint solutions first, then
    # each page's section exercise solutions, then review exercises.  But I don't think we need
    # to make it that complicated.  Let's make BakeChapterAnswerKey.v1 take the name of a strategy
    # for pulling out the solutions in order and writing them to `os-solution-area` divs.  Maybe
    # some other book will also use the calculus strategy, but probably not.  Later we can also
    # make a "standard" strategy that does what Chemistry does and just puts all the solutions
    # straight in without any subsections.  The strategy can live in
    # lib/kitchen/directions/bake_chapter_answer_key/strategies/calculus.rb - the nice thing is that
    # you can also unit test this strategy
    BakeChapterAnswerKey.v1(chapter: chapter,
                            metadata_source: book.metadata,
                            strategy: :calculus,
                            append_to: book_answer_key)

    #
    # BEGIN PSEUDOCODE (this code would live in Kitchen):
    #
    class BakeChapterAnswerKey::V1
      def bake(chapter:, metadata_source:, strategy:, append_to:)
        strategy =
          case strategy
          when :calculus
            CalculusStrategy.new(chapter: chapter)
          else
            raise "No such strategy"
          end

        append_to.append(child:
          <<~HTML
            <div class="os-eob os-solutions-container" data-type="composite-page" data-uuid-key=".solutions#{chapter.count_in(:book)}">
              <h2 data-type="document-title">
                ...
              </h2>
              #{metadata_source.copy}
            </div>
          HTML
        )

        # Add a new last_element method to Kitchen::ElementBase - should wrap
        # https://nokogiri.org/rdoc/Nokogiri/XML/Node.html#last_element_child-instance_method
        strategy.bake(chapter: chapter, append_to: append_to.last_element)
      end
    end

    class BakeChapterAnswerKey::CalculusStrategy
      def bake(chapter:, append_to:)
        checkpoint_solutions = chapter.search('.checkpoint [data-type="solution"]').cut
        append_solution_area("Checkpoint", checkpoint_solutions, append_to)

        chapter.search('os-section-exercises-container').each do |section|
          section_solutions = section.search('[data-type="solution"]').cut
          section_title = section.title.text
          append_solution_area(section_title, section_solutions, append_to)
        end

        ... and one more for review exercises
      end

      protected

      def append_solution_area(title, clipboard, append_to)
        return if clipboard.empty?

        append_to.append(child:
          <<~HTML
            <div class="os-solution-area">
              <h2>... title ... </h2>
              #{clipboard.paste}
            </div>
          HTML
        )
      end
    end
    #
    # END PSEUDOCODE
    #

  end

  BakeStepwise.v1(book: book)
  BakeUnnumberedTables.v1(book: book)

  book.pages.each do |page|
    # fix table captions

    page.search('.section-exercises').each do |section|
      section.search('.os-problem-container > .os-table:first-child').each do |table|
        table.add_class('first-element')
        table.parent.add_class('has-first-element')
      end

      section.search('.os-problem-container > [data-type="media"]:first-child').each do |img|
        img.add_class('first-element')
        img.parent.add_class('has-first-element')
      end
    end

    page.search('div.os-table div.os-caption-container').each do |caption|
      caption_text = caption.first('span.os-caption [data-type="title"]')
      next unless caption_text.present?

      caption_text.add_class('os-title').name = 'span'
      divider_aux = caption.first('span.os-divider')
      divider_aux.append(sibling:
        <<~HTML
          #{caption_text&.cut}
        HTML
      )
    end
  end

  BakeMathInParagraph.v1(book: book)
  BakeIndex.v1(book: book)
  BakeCompositePages.v1(book: book)
  BakeFootnotes.v1(book: book)

  BakeToc.v1(book: book)

  # group composite pages at the end of the chapter
  book.toc.search('.os-toc-chapter ol.os-chapter').each_with_index do |chapter, index|
    chapter_element = Nokogiri::XML.fragment(chapter.children)
    composite_pages = chapter_element.search('li.os-toc-chapter-composite-page')
    # first_composite_href = composite_pages.search('a').first['href']
    chapter.search('class').each(&:trash)
    chapter_element.search('li.os-toc-chapter-composite-page').remove
    chapter.replace_children(with:
      <<~HTML
        #{chapter_element}
        <li class="os-toc-composite-chapter" cnx-archive-shortid="" cnx-archive-uri="">
          <a href="#composite-chapter-#{index + 1}">
            <span class="os-text">#{I18n.t(:chapter_review)}</span>
          </a>
          <ol class="os-chapter">
            #{composite_pages}
          </ol>
        </li>
      HTML
    )
  end

  book.chapters.each do |chapter|
    chapter.search('div[data-type="equation"]:not(.unnumbered)').each do |equation|
      equation.append(child:
        <<~HTML
          <div class="os-equation-number">
            <span class="os-number">(#{chapter.count_in(:book)}.#{equation.count_in(:chapter)})</span>
          </div>
        HTML
      )
    end

    BakePageAbstracts.v1(chapter: chapter)
    chapter.abstracts.each do |abstract|
      abstract.search('ul').each do |ul|
        ul.add_class('os-abstract')
        ul_element = Nokogiri::XML.fragment(ul)
        ul_element.children.remove
        ul.search('li').each_with_index do |li, index|
          ul_element.add_child(
            <<~HTML
              <li>
                <span class="os-abstract-token">#{chapter.count_in(:book)}.#{abstract.count_in(:chapter)}.#{index + 1}</span>
                <span class="os-abstract-content">#{li.text}</span>
              </li>
            HTML
          )
        end
        ul.replace_children(with: ul_element.children)
      end
    end
  end

  # competing docs from elements - BakeLinkPlaceholders
  book.search('a').each do |anchor|
    next unless anchor.text == '[link]'

    id = anchor[:href][1..-1]
    replacement = doc.pantry(name: :link_text).get(id)
    if replacement.present?
      anchor.replace_children(with: replacement)
    else
      # TODO: log a warning!
      puts "warning! could not find a replacement for '[link]' on an element with ID '#{id}'"
    end
  end
end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: recipe,
  output_file: opts[:output]
)
