#!/usr/bin/env ruby

# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  gem 'openstax_kitchen', ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : '9.0.0'
  gem 'slop', '4.8.2'
  gem 'byebug'
end

recipe = Kitchen::BookRecipe.new(book_short_name: :english_composition) do |doc|
  include Kitchen::Directions

  book = doc.book
  metadata = book.metadata

  # Some stuff just goes away
  book.search('cnx-pi').trash

  BakePreface.v1(book: book)
  BakeHandbook.v1(book: book)

  BakeChapterTitle.v1(book: book)
  BakeChapterIntroductions.v2(book: book, strategy_options: { strategy: :add_objectives,
                                                              bake_chapter_outline: true,
                                                              introduction_order: :v1 })
  BakeUnitTitle.v1(book: book)
  BakeUnitPageTitle.v1(book: book)

  # Bake EoC sections
  eoc_sections = %w[further-reading works-cited works-consulted]
  eoc_sections.each do |section_key|
    book.chapters.each do |chapter|
      MoveCustomSectionToEocContainer.v1(
        chapter: chapter,
        metadata_source: metadata,
        container_key: section_key,
        uuid_key: ".#{section_key}",
        section_selector: "section.#{section_key}"
      ) do |section|
        RemoveSectionTitle.v1(section: section)
      end
    end
  end

  book.chapters.each do |chapter|

    chapter.pages.each do |page|
      page.search('div[data-type="media"]').each do |media_container|
        BakeIframes.v1(outer_element: media_container)
      end
      page.search('section').exercises.each do |exercise|
        BakeNumberedExercise.v1(exercise: exercise,
                                number: exercise.count_in(:section),
                                suppress_solution_if: false,
                                note_suppressed_solutions: false)
      end
    end
    BakePageAbstracts.v1(chapter: chapter)

    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}")
    end

    BakeNonIntroductionPages.v1(chapter: chapter)

    chapter.figures(only: :figure_to_bake?).each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}")

    end
    BakeAnnotationClasses.v1(chapter: chapter)
  end

  # Bake Custom Sections
  custom_sections_properties = {
    narrative_trailblazer: {
      class: 'narrative-trailblazer',
      inject: 'title'
    },
    living_words: {
      class: 'living-words',
      inject: 'subtitle'
    },
    quick_launch: {
      class: 'quick-launch',
      inject: 'title_prefix'
    },
    drafting: {
      class: 'drafting',
      inject: 'title_prefix'
    },
    peer_review: {
      class: 'peer-review',
      inject: 'title_prefix'
    },
    revising: {
      class: 'revising',
      inject: 'title_prefix'
    }
  }

  book.chapters.each do |chapter|
    BakeCustomSections.v1(
      chapter: chapter,
      custom_sections_properties: custom_sections_properties
    )
  end

  BakeStepwise.v1(book: book)
  BakeUnnumberedTables.v1(book: book)
  BakeIndex.v1(book: book)
  BakeCompositePages.v1(book: book)
  BakeCompositeChapters.v1(book: book)
  BakeFootnotes.v1(book: book)
  BakeLinkPlaceholders.v1(book: book)
  BakeToc.v1(book: book)
end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: [recipe],
  output_file: opts[:output]
)
