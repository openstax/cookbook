#!/usr/bin/env ruby

# frozen_string_literal: true

# TODO: content update needed - add os-toc-preface class

require 'bundler/inline'

gemfile do
  gem 'openstax_kitchen', ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : '2.0.0'
  gem 'slop', '4.8.2'
  gem 'byebug'
end

recipe = Kitchen::BookRecipe.new(book_short_name: :american_gov) do |doc|
  include Kitchen::Directions

  book = doc.book

  # Update the preface title  TODO: add title method
  book.pages('$.preface').search("div[data-type='document-title']").each do |title|
    title.replace_children(with:
      <<~HTML
        <span data-type="" itemprop="" class="os-text">#{title.text}</span>
      HTML
    )
    title.name = 'h1'
  end

  BakeChapterIntroductions.v1(book: book)

  book.chapters.each do |chapter|
    BakeChapterGlossary.v1(chapter: chapter, metadata_source: book.metadata)
    BakeChapterSummary.v1(chapter: chapter, metadata_source: book.metadata)

    # Fix up chapter titles - TODO put this in BakeChapter
    heading = chapter.at('h1[2]')
    heading[:id] = "chapTitle#{chapter.count_in(:book)}"
    heading.replace_children(with:
      <<~HTML
        <span class="os-part-text">Chapter </span>
        <span class="os-number">#{chapter.count_in(:book)}</span>
        <span class="os-divider"> </span>
        <span data-type="" itemprop="" class="os-text">#{heading.text}</span>
      HTML
    )
    chapter.pages('$:not(.introduction)').each do |page|
      page.search("div[data-type='description']").each(&:trash)
      page.add_class('chapter-content-module')

      title = page.search("div[data-type='document-title']").first
      title.name = 'h2'
      title.replace_children(with:
        <<~HTML
          <span class="os-number">#{chapter.count_in(:book)}.#{page.count_in(:chapter)}</span>
          <span class="os-divider"> </span>
          <span data-type="" itemprop="" class="os-text">#{title.text}</span>
        HTML
      )
    end
  end

  book.pages('$.appendix').each do |page|
    appendix_letter = [*('A'..'Z')][page.count_in(:book) - 1]

    page.figures.each do |figure|
      BakeFigure.v1(figure: figure, number: "#{appendix_letter}#{figure.count_in(:page)}")
    end

    page.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table, number: "#{appendix_letter}#{table.count_in(:page)}")
    end

    page.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{appendix_letter}#{example.count_in(:page)}",
                     title_tag: 'div')
    end

    BakeAppendix.v1(page: page, number: appendix_letter)
  end

  BakeIndex.v1(book: book)
  BakeToc.v1(book: book)
end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: recipe,
  output_file: opts[:output]
)
