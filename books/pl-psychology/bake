#!/usr/bin/env ruby

# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  gem 'openstax_kitchen', ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : '3.0.0'
  gem 'slop', '4.8.2'
  gem 'byebug'
end

I18n.locale = :pl

recipe = Kitchen::BookRecipe.new(book_short_name: :plpsychology) do |doc|
  include Kitchen::Directions

  book = doc.book

  # Some stuff just goes away
  book.search('cnx-pi').trash

  BakePreface.v1(book: book)

  book.chapters.each do |chapter|
    BakeChapterGlossary.v1(chapter: chapter, metadata_source: book.metadata)
    BakeChapterSummary.v1(chapter: chapter, metadata_source: book.metadata)
  end

  BakeChapterIntroductions.v1(book: book)
  BakeChapterTitle.v1(book: book)

  book.chapters.each do |chapter|
    BakePageAbstracts.v1(chapter: chapter)

    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}")
    end

    chapter.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{chapter.count_in(:book)}.#{example.count_in(:chapter)}",
                     title_tag: 'h3')
    end

    # Captions of figures in easybaked files contain ids.
    # They're necessary only in Adaptarr (content editing tool used by Polish team),
    # so there is no need to add them to kitchen baked files.
    chapter.figures.each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}")
    end

    BakeNonIntroductionPages.v1(chapter: chapter)
  end

  BakeAutotitledNotes.v1(book: book, classes: %w[link-to-learning
                                                 dig-deeper
                                                 everyday-connection
                                                 what-do-you-think
                                                 connect-the-concepts])
  BakeIndex.v1(book: book)
  BakeCompositePages.v1(book: book)
  BakeFootnotes.v1(book: book)

  BakeToc.v1(book: book)
  BakeLinkPlaceholders.v1(book: book)

end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: recipe,
  output_file: opts[:output]
)
