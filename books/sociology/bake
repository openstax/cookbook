#!/usr/bin/env ruby

# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  gem 'openstax_kitchen', ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : '3.0.0'
  gem 'slop', '4.8.2'
  gem 'byebug'
end

# cleanup_recipe = Kitchen::BookRecipe.new(book_short_name: :sociology) do |doc|
#   include Kitchen::Directions

#   # Set overrides
#   doc.search('div.section_summary').each do |elem|
#     elem.name = 'section'
#     elem.add_class('summary').elem.remove_class('section_summary')
#   end
# end

recipe = Kitchen::BookRecipe.new(book_short_name: :sociology) do |doc|
  include Kitchen::Directions

  # Set overrides
  doc.selectors.override(
    page_summary: '.section-summary'
  )

  book = doc.book

  # Some stuff just goes away
  book.search('cnx-pi').trash

  BakePreface.v1(book: book)

  # Bake NumberedTable in Preface
  book.pages('$.preface').tables('$:not(.unnumbered)').each do |table|
    BakeNumberedTable.v1(table: table,
                         number: "#{table.count_in(:page)}")
  end

  book.chapters.each do |chapter|
    BakeChapterGlossary.v1(chapter: chapter, metadata_source: book.metadata)
    # BakeChapterSummary.v1(chapter: chapter, metadata_source: book.metadata, klass: 'section-summary')
    MoveExercisesToEOC.v3(chapter: chapter, metadata_source: book.metadata, klass: 'section-quiz')
    MoveExercisesToEOC.v3(chapter: chapter, metadata_source: book.metadata, klass: 'short-answer')
    BakeFurtherResearch.v1(chapter: chapter, metadata_source: book.metadata)
  end

  book.composite_pages.each do |composite_page|
    composite_page.search('.short-answer, .section-quiz').exercises.each do |exercise|
      BakeNumberedExercise.v1(exercise: exercise, number: exercise.count_in(:composite_page), suppress_even_solution: true)
    end
  end

  solution_container = BookAnswerKeyContainer.v1(book: book, klass: 'solution')
  book.chapters.each do |chapter|
    MoveSolutionsToAnswerKey.v1(chapter: chapter,
                                metadata_source: book.metadata,
                                strategy: :sociology,
                                append_to: solution_container,
                                klass: 'solution')
  end

  # Hacky solution for fixing empty titles in the Answer Key
  if solution_container.contains?(' > [data-type="composite-page"] > div[data-type="solution"]')
    solution_container.add_class('has-solutions')
    book.body.add_class('has-answerkey')
  else
    solution_container.add_class('no-solutions')
    book.search('.os-eob.os-solution-container.no-solutions[data-type = "composite-chapter"]').first.trash
    book.body.add_class('no-answerkey')
    book.search('body.no-answerkey > #toc > ol > li.os-toc-composite-chapter').trash
  end

  BakeChapterIntroductions.v1(book: book)
  BakeChapterTitle.v1(book: book)

  book.chapters.each do |chapter|
    BakePageAbstracts.v1(chapter: chapter)

    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}")
    end

    chapter.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{chapter.count_in(:book)}.#{example.count_in(:chapter)}",
                     title_tag: 'h3')
    end

    BakeNonIntroductionPages.v1(chapter: chapter)

    chapter.non_introduction_pages.each do |page|
      page.search("div[data-type='description']").each(&:trash)
    end

    chapter.figures.each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}")
    end
  end

  book.pages('$.appendix').each do |page|
    appendix_letter = [*('A'..'Z')][page.count_in(:book) - 1]

    page.figures.each do |figure|
      BakeFigure.v1(figure: figure, number: "#{appendix_letter}#{figure.count_in(:page)}")
    end

    page.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table, number: "#{appendix_letter}#{table.count_in(:page)}")
    end

    page.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{appendix_letter}#{example.count_in(:page)}",
                     title_tag: 'div')
    end

    BakeAppendix.v1(page: page, number: appendix_letter)
  end

  BakeAutotitledNotes.v1(book: book, classes: %w[sociological-research
                                                 sociology-real-world
                                                 sociology-big-picture
                                                 sociology-policy-debate])
  BakeStepwise.v1(book: book)
  BakeUnnumberedTables.v1(book: book)
  # BakeMathInParagraph.v1(book: book)
  BakeIndex.v1(book: book)
  BakeCompositePages.v1(book: book)
  BakeCompositePages.v1(book: book)
  BakeCompositeChapters.v1(book: book)
  BakeFootnotes.v1(book: book)
  BakeLinkPlaceholders.v1(book: book)
  BakeToc.v1(book: book)

end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: [recipe],
  output_file: opts[:output]
)
