#!/usr/bin/env ruby

# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  gem 'openstax_kitchen', ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : '5.0.0'
  gem 'slop', '4.8.2'
  gem 'byebug'
  gem 'twitter_cldr', '6.6.0'
end

recipe = Kitchen::BookRecipe.new(book_short_name: :sociology) do |doc|
  include Kitchen::Directions

  # Set overrides
  doc.selectors.override(
    page_summary: '.section-summary',
    reference: '.references'
  )

  book = doc.book

  # Some stuff just goes away
  book.search('cnx-pi').trash

  # Remove data-type="description" from body metadata
  book.body.search('[data-type="metadata"] > [data-type="description"]').trash

  BakePreface.v1(book: book)

  # Bake NumberedTable in Preface
  book.pages('$.preface').tables('$:not(.unnumbered)').each do |table|
    BakeNumberedTable.v1(table: table, number: "#{table.count_in(:page)}")
  end

  BakeChapterTitle.v1(book: book)
  BakeChapterIntroductions.v1(book: book)

  # Bake EoC sections
  book.chapters.each do |chapter|
    BakeChapterGlossary.v1(chapter: chapter, metadata_source: book.metadata)
    BakeChapterSummary.v1(chapter: chapter, metadata_source: book.metadata, klass: 'section-summary')
    MoveExercisesToEOC.v3(chapter: chapter, metadata_source: book.metadata, klass: 'section-quiz')
    MoveExercisesToEOC.v3(chapter: chapter, metadata_source: book.metadata, klass: 'short-answer')
    BakeFurtherResearch.v1(chapter: chapter, metadata_source: book.metadata)
    chapter.composite_pages.each do |composite_page|
      composite_page.search('.short-answer, .section-quiz').exercises.each do |exercise|
        BakeNumberedExercise.v1(exercise: exercise,
                                number: exercise.count_in(:composite_page),
                                suppress_solution_if: :even?,
                                note_suppressed_solutions: true)
      end
    end
    BakeChapterReferences.v1(chapter: chapter, metadata_source: book.metadata)

  end

  # Bake Answer Key
  if book.contains?(' div[data-type="solution"]') # Used only in Sociology 3e, Sociology 2e has supressed(commented out) all solutions
    solution_container = BookAnswerKeyContainer.v1(book: book, solutions_plural: false)
    book.chapters.each do |chapter|
      MoveSolutionsToAnswerKey.v1(chapter: chapter,
                                  metadata_source: book.metadata,
                                  strategy: :default,
                                  strategy_options: { classes: %w[section-quiz] },
                                  append_to: solution_container,
                                  solutions_plural: false)
    end
  end

  book.chapters.each do |chapter|
    BakePageAbstracts.v1(chapter: chapter)

    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}")
    end

    BakeNonIntroductionPages.v1(chapter: chapter)

    chapter.figures(except: :subfigure?).each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}")

    end
  end

  BakeAutotitledNotes.v1(book: book, classes: %w[sociological-research
                                                 sociology-real-world
                                                 sociology-big-picture
                                                 sociology-policy-debate])
  BakeStepwise.v1(book: book)
  BakeUnnumberedTables.v1(book: book)
  BakeIndex.v1(book: book)
  BakeCompositePages.v1(book: book)
  BakeCompositeChapters.v1(book: book)
  BakeFootnotes.v1(book: book)
  BakeLinkPlaceholders.v1(book: book)
  BakeToc.v1(book: book)

end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: [recipe],
  output_file: opts[:output]
)
