#!/usr/bin/env ruby

require 'bundler/inline'

gemfile do
  gem 'openstax_kitchen', ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : '5.0.0'
  gem 'slop', '4.8.2'
  gem 'byebug'
end

recipe = Kitchen::BookRecipe.new(book_short_name: :statistics) do |doc|
  include Kitchen::Directions

  # Set overrides
  doc.selectors.override(
    reference: '.references'
  )

  book = doc.book
  metadata = book.metadata

  # Some stuff just goes away
  book.search('cnx-pi').trash

  BakePreface.v1(book: book, title_element: 'h1')
  BakeInlineLists.v1(book: book)
  BakeUnclassifiedNotes.v1(book: book)
  BakeChapterTitle.v1(book: book)

  book.chapters.each do |chapter|
    # EOC sections
    BakeChapterGlossary.v1(chapter: chapter, metadata_source: metadata)

    BakeChapterSummary.v1(chapter: chapter, metadata_source: metadata)

    MoveCustomSectionToEocContainer.v1(
      chapter: chapter,
      metadata_source: metadata,
      container_key: 'formula-review',
      uuid_key: '.formula-review',
      section_selector: 'section.formula-review',
      append_to: chapter,
      include_intro_page: true
    ) do |section|
      RemoveSectionTitle.v1(section: section)
      section.prepend(child: EocSectionTitleLinkSnippet.v1(
        page: section.ancestor(:page)
      ))
    end

    MoveCustomSectionToEocContainer.v1(
      chapter: chapter,
      metadata_source: metadata,
      container_key: 'practice',
      uuid_key: '.practice',
      section_selector: 'section.practice',
      append_to: chapter,
      include_intro_page: true
    ) do |section|
      RemoveSectionTitle.v1(section: section)
    end

    BakeFreeResponse.v1(chapter: chapter, metadata_source: metadata)

    MoveCustomSectionToEocContainer.v1(
      chapter: chapter,
      metadata_source: metadata,
      container_key: 'bringing-together-homework',
      uuid_key: '.bringing-together-homework',
      section_selector: 'section.bringing-together-homework',
      append_to: chapter,
      include_intro_page: true
    ) do |section|
      RemoveSectionTitle.v1(section: section)
    end

    BakeChapterReferences.v1(chapter: chapter, metadata_source: book.metadata)

    chapter.search('.free-response').exercises.each do |exercise|
      BakeNumberedExercise.v1(exercise: exercise, number: exercise.count_in(:chapter))
    end

    BakeChapterSolutions.v1(chapter: chapter, metadata_source: metadata)

  end

  BakeChapterIntroductions.v1(book: book, bake_chapter_objectives: false)

  book.chapters.each do |chapter|

    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}",
                           always_caption: true)
    end

    chapter.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{chapter.count_in(:book)}.#{example.count_in(:chapter)}",
                     title_tag: 'h3',
                     numbered_solutions: true)
    end

    chapter.pages('$:not(.introduction)').each do |page|
      page.search("div[data-type='description']").each(&:trash)
      page.add_class('chapter-content-module')

      title = page.search("div[data-type='document-title']").first
      title.name = 'h2'
      title.replace_children(with:
        <<~HTML
          <span class="os-number">#{chapter.count_in(:book)}.#{page.count_in(:chapter)}</span>
          <span class="os-divider"> </span>
          <span data-type="" itemprop="" class="os-text">#{title.text}</span>
        HTML
      )
    end

    chapter.figures(except: :subfigure?).each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}")
    end
  end

  BakeNumberedNotes.v3(book: book, classes: %w[try])

  book.pages('$.appendix').each do |page|
    appendix_letter = [*('A'..'Z')][page.count_in(:book) - 1]

    page.figures.each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{appendix_letter}#{figure.count_in(:page)}")
    end

    page.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{appendix_letter}#{table.count_in(:page)}",
                           always_caption: true)
    end

    # page.examples.each do |example|
    #   BakeExample.v1(example: example,
    #                  number: "#{appendix_letter}#{example.count_in(:page)}",
    #                  title_tag: 'div')
    # end

    BakeAppendix.v1(page: page, number: appendix_letter)
  end

  BakeStepwise.v1(book: book)
  BakeUnnumberedTables.v1(book: book)
  BakeMathInParagraph.v1(book: book)
  BakeIndex.v1(book: book)
  BakeCompositePages.v1(book: book)
  BakeFootnotes.v1(book: book)

  BakeToc.v1(book: book)

  # competing docs from elements - BakeLinkPlaceholders
  book.search('a').each do |anchor|
    next unless anchor.text == '[link]'

    id = anchor[:href][1..-1]
    replacement = doc.pantry(name: :link_text).get(id)
    if replacement.present?
      anchor.replace_children(with: replacement)
    else
      # TODO: log a warning!
      puts "warning! could not find a replacement for '[link]' on an element with ID '#{id}'"
    end
  end

end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: recipe,
  output_file: opts[:output]
)
