# frozen_string_literal: true

module Kitchen::Directions
  module BakeNumberedNotes
    class V1
      def bake(book:, classes:, options:)
        classes.each do |klass|
          book.chapters.pages.notes("$.#{klass}").each do |note|
            chapter_count = note.ancestor(:chapter).count_in(:book)
            note_count = note.count_in(:chapter)

            bake_note(note: note,
                      number: "#{chapter_count}.#{note_count}",
                      options: options
                    )
          end

          book.pages('$.appendix').notes("$.#{klass}").each do |note|
            appendix_count = [*('A'..'Z')][note.ancestor(:page).count_in(:book) - 1]
            note_count = note.count_in(:page)

            bake_note(note: note,
                      number: "#{appendix_count}#{note_count}",
                      options: options
                    )
          end
        end
      end

      def bake_note(note:, number:, options:)
        note.wrap_children(class: 'os-note-body')

        note.prepend(child:
          <<~HTML
            <h3 class="os-title">
              <span class="os-title-label">#{note.autogenerated_title}</span>
              <span class="os-number">#{number}</span>
              <span class="os-divider"> </span>
            </h3>
          HTML
        )

        BakeNoteSubtitle.v1(note: note, cases: options[:cases]) if note['use-subtitle']

        return unless options[:bake_exercises]

        note.exercises.each do |exercise|
          BakeNoteExercise.v1(note: note, exercise: exercise)
        end
        note.injected_questions.each do |question|
          BakeNoteInjectedQuestion.v1(note: note, question: question)
        end
      end
    end
  end
end
