module Kitchen
  class NoteElement < Element

    TITLE_TRANSLATION_KEYS = %w(
      link-to-learning
    )

    def self.short_type
      :note
    end

    # TODO allow specifying element or node and document
    def initialize(element:)
      super(node: element.raw, document: element.document, short_type: self.class.short_type)
    end

    def title
      block_error_if(block_given?)
      first("[data-type='title']")
    end

    def autogenerated_title
      translation_key = translation_key_in(TITLE_TRANSLATION_KEYS)
      I18n.t(:"notes.#{document.short_name}.#{translation_key}", default: :"notes.#{translation_key}")
    end

    def translation_key_in(possible_translation_keys)
      keys = possible_translation_keys & classes
      raise("too many translation keys: #{keys.join(', ')}") if !keys.one?
      keys.first
    end

    protected

    # TODO pass enumerator class to Element constructor and get rid of this in each element
    def as_enumerator
      NoteElementEnumerator.new {|block| block.yield(self)}
    end

  end
end
