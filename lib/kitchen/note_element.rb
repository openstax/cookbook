# frozen_string_literal: true

module Kitchen
  # An element for a note
  #
  class NoteElement < ElementBase

    TITLE_TRANSLATION_KEYS = %w[
      link-to-learning
      everyday-life
      sciences-interconnect
      chemist-portrait
    ].freeze

    # Creates a new +NoteElement+
    #
    # @param node [Nokogiri::XML::Node] the node this element wraps
    # @param document [Document] this element's document
    #
    def initialize(node:, document: nil)
      super(node: node,
            document: document,
            enumerator_class: NoteElementEnumerator,
            short_type: :note)
    end

    # Returns the note's title element
    #
    # @return [Element, nil]
    #
    def title
      block_error_if(block_given?)
      first("[data-type='title']")
    end

    # Returns true if the note's title is autogenerated
    #
    # @return [Boolean]
    #
    def indicates_autogenerated_title?
      translation_key_in(TITLE_TRANSLATION_KEYS).present?
    end

    # Get the autogenerated title for this note
    #
    # @return [String]
    #
    def autogenerated_title
      translation_key = translation_key_in(TITLE_TRANSLATION_KEYS)
      I18n.t(:"notes.#{document.short_name}.#{translation_key}",
             default: :"notes.#{translation_key}")
    end

    # Returns true if this class represents the element for the given node
    #
    # @param node [Nokogiri::XML::Node] the underlying node
    # @return [Boolean]
    #
    def self.is_the_element_class_for?(node)
      node['data-type'] == 'note'
    end

    protected

    def translation_key_in(possible_translation_keys)
      keys = possible_translation_keys & classes
      raise("too many translation keys: #{keys.join(', ')}") if keys.many?

      keys.first
    end

  end
end
