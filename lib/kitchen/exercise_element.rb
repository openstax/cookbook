# frozen_string_literal: true

module Kitchen
  # An element for an example
  #
  class ExerciseElement < ElementBase

    # Creates a new +ExerciseElement+
    #
    # @param node [Nokogiri::XML::Node] the node this element wraps
    # @param document [Document] this element's document
    #
    def initialize(node:, document: nil)
      super(node: node,
            document: document,
            enumerator_class: ExerciseElementEnumerator)
    end

    # Returns the short type
    # @return [Symbol]
    #
    def self.short_type
      :exercise
    end

    # Returns the enumerator for problem.
    #
    # @return ElementEnumerator
    #
    def problem
      first("div[data-type='problem']")
    end

    # Returns the enumerator for solution.
    #
    # @return ElementEnumerator
    #
    def solution
      first("div[data-type='solution']")
    end

    # Returns the enumerator for solutions
    #
    # @return [ElementEnumerator]
    #
    def solutions
      search("div[data-type='solution']")
    end

    # Returns whether the exercise has been baked
    #
    # @return [Boolean]
    #
    def baked?
      search('div.os-problem-container').any?
    end

    # Returns true if the exercise's title is autogenerated
    #
    # @return [Boolean]
    #
    def indicates_autogenerated_title?
      detected_exercise_title_key != 0 && detected_exercise_title_key.present?
    end

    # Get the autogenerated title for this note
    #
    # @return [String]
    #
    def autogenerated_title
      if indicates_autogenerated_title?
        I18n.t(:"exercises.#{detected_exercise_title_key}")
      else
        "unknown title for exercise with classes #{classes}"
      end
    end

    def detected_exercise_title_key
      @detected_exercise_title_key ||= begin
        return 0 if classes.empty? || !I18n.t('.').key?(:exercises)

        possible_keys = I18n.t(:exercises).keys.map(&:to_s)
        keys = possible_keys & classes

        raise("too many translation keys: #{keys.join(', ')}") if keys.many?
        return 0 if keys.empty?

        keys.first
      end
    end
  end
end
