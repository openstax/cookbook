#!/usr/bin/env ruby

# frozen_string_literal: true

require_relative 'strategy'
require_relative 'appendix_strategy'
require_relative '../recipes_helper'

recipe = Kitchen::BookRecipe.new(book_short_name: :marketing) do |doc|
  include Kitchen::Directions

  # Set overrides
  doc.selectors.override(
    reference: 'section.references'
  )

  book = doc.book
  metadata = book.metadata

  book.search('cnx-pi').trash

  BakePreface.v1(book: book)

  book.pages('$.preface').each do |page|
    page.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: table.count_in(:page).to_s)
    end
  end

  BakeChapterIntroductions.v2(
    book: book, strategy_options: {
      strategy: :add_objectives, bake_chapter_outline: true, introduction_order: :v3
    }
  )
  BakeChapterTitle.v1(book: book)

  BakeUnnumberedFigure.v1(book: book)
  AddInjectedExerciseId.v1(book: book)

  answer_key = BookAnswerKeyContainer.v1(book: book, solutions_plural: false)

  book.chapters.each do |chapter|
    BakeNonIntroductionPages.v1(chapter: chapter)
    BakeLearningObjectives.v2(chapter: chapter, add_title: false)

    chapter.figures(only: :figure_to_number?).each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}")
    end

    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}")
    end

    chapter.pages.each do |page|
      BakeAllNumberedExerciseTypes.v1(
        within: page.search('section.knowledge-check')
      )
    end

    MoveCustomSectionToEocContainer.v1(
      chapter: chapter,
      metadata_source: metadata,
      container_key: 'chapter-summary',
      uuid_key: '.chapter-summary',
      section_selector: 'section.chapter-summary'
    ) do |section|
      RemoveSectionTitle.v1(section: section)
    end

    BakeChapterGlossary.v1(chapter: chapter, metadata_source: metadata)

    eoc_sections = %w[marketing-discussion critical-thinking building-brand
                      marketers-do marketing-plan company-case]

    eoc_sections.each do |section_key|
      BakeAllNumberedExerciseTypes.v1(
        within: chapter.pages.search("section.#{section_key}")
      )

      MoveCustomSectionToEocContainer.v1(
        chapter: chapter,
        metadata_source: metadata,
        container_key: section_key,
        uuid_key: ".#{section_key}",
        section_selector: "section.#{section_key}"
      ) do |section|
        RemoveSectionTitle.v1(section: section)
      end
    end

    BakeChapterReferences.v2(
      chapter: chapter,
      metadata_source: metadata,
      uuid_prefix: '.',
      klass: 'references'
    )

    answer_key_inner_container = AnswerKeyInnerContainer.v1(
      chapter: chapter, metadata_source: metadata, append_to: answer_key, solutions_plural: false
    )
    Strategy.new.bake(
      chapter: chapter,
      append_to: answer_key_inner_container
    )
  end

  notes = %w[marketing-practice companies-conscience link-to-learning]
  BakeAutotitledNotes.v1(book: book, classes: notes)
  BakeAutotitledNotes.v1(book: book, classes: %w[marketing-dashboard], bake_exercises: true)
  BakeCustomTitledNotes.v1(book: book, classes: %w[unit-opener word-document])

  book.pages('$.appendix').each do |page|
    appendix_letter = [*('A'..'Z')][page.count_in(:book) - 1]
    BakeAppendix.v1(page: page, number: appendix_letter)

    page.figures('$:not(.unnumbered)').each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{appendix_letter}#{figure.count_in(:page)}")
    end

    page.search('section.knowledge-check').injected_exercises.each do |exercise|
      BakeInjectedExercise.v1(exercise: exercise)
    end

    page.search('section.knowledge-check').injected_questions.each do |question|
      BakeInjectedExerciseQuestion.v1(question: question, number: "#{appendix_letter}#{question.count_in(:page)}")
    end

    answer_key_appendix_inner_container = AnswerKeyInnerContainer.v1(
      chapter: page, metadata_source: metadata, append_to: answer_key, solutions_plural: false,
      in_appendix: true
    )

    AppendixStrategy.new.bake(
      page: page,
      append_to: answer_key_appendix_inner_container
    )
  end

  BakeIframes.v1(book: book)
  BakeFootnotes.v1(book: book, number_format: :roman)
  BakeIndex.v1(book: book)
  BakeCompositePages.v1(book: book)
  BakeCompositeChapters.v1(book: book)
  BakeToc.v1(book: book)
  BakeUnitTitle.v1(book: book)
  BakeLinkPlaceholders.v1(book: book)
  BakeFolio.v1(book: book)
end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: [recipe, VALIDATE_OUTPUT],
  output_file: opts[:output]
)
