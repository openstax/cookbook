#!/usr/bin/env ruby

# frozen_string_literal: true

require 'bundler/inline'
require 'tempfile'

gemfile do
  gem 'slop', '4.8.2'
  gem 'byebug'
end

opts = Slop.parse do |slop|
  slop.string '--recipe', 'Name for new recipe', required: true
end

recipe = opts[:recipe]
recipe_dir = "#{Dir.pwd}/books/#{recipe}"
recipe_underscores = recipe.gsub('-', '_')

Dir.mkdir(recipe_dir)
Dir.mkdir("#{recipe_dir}/locales")
# Create locales
File.write(
  "#{recipe_dir}/locales/en.yml",
  <<~YML
    en:
      sample: Text # remove this later
  YML
)
# Create bake
File.write(
  "#{recipe_dir}/bake",
  <<~RUBY
    #!/usr/bin/env ruby

    # frozen_string_literal: true

    require 'bundler/inline'
    require_relative '../../bake_helper'

    gemfile do
      gem 'openstax_kitchen', \\
          ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : KITCHEN_VERSIONS[:#{recipe_underscores}]
      gem 'slop', '4.8.2'
      gem 'byebug'
    end

    recipe = Kitchen::BookRecipe.new(book_short_name: :#{recipe_underscores}) do |doc|
      include Kitchen::Directions

      book = doc.book
      metadata = book.metadata

      book.search('cnx-pi').trash

      # Your recipe code goes here

      BakeFolio.v1(book: book)
    end

    opts = Slop.parse do |slop|
      slop.string '--input', 'Assembled XHTML input file', required: true
      slop.string '--output', 'Baked XHTML output file', required: true
    end

    puts Kitchen::Oven.bake(
      input_file: opts[:input],
      recipes: [recipe],
      output_file: opts[:output]
    )
  RUBY
)
FileUtils.chmod('+x', "#{recipe_dir}/bake")

# Add to bake script at root (alphabetically)
temp = Tempfile.new
lines = File.readlines("#{Dir.pwd}/bake")
# ... a bunch of logic for parsing the file & figuring out where to insert the new line ...
recipes_names = lines.select { |line| line.match(/[a-z|-]+\)(\s\$DIR.*);;/) } \
                     .map { |line| line.match(/((\w|-)*)\)/).values_at(1)[0] }
recipes_names.append(recipe).sort!
lines_count_before_case = lines.find_index("case \"${book}\" in\n") + 1
insert_index = recipes_names.find_index(recipe) + lines_count_before_case
lines.insert(
  insert_index,
  "  #{recipe}) $DIR/books/#{recipe}/bake --input $input_file --output $output_file;;\n"
)
lines.each { |line| temp << line }
temp.rewind
File.write("#{Dir.pwd}/bake", temp.read)
