#!/usr/bin/env ruby

# frozen_string_literal: true

require 'fileutils'

# Create locales directory and en.yml file with test data
def create_initial_locales(recipe_dir)
  File.write(
    "#{recipe_dir}/locales/en.yml",
    <<~YML
      en:
        sample: Text # remove this later
    YML
  )
end

# Create bake file
def create_initial_bake_script(recipe_dir, recipe)
  recipe_underscores = recipe.gsub('-', '_')
  File.write(
    "#{recipe_dir}/bake",
    <<~RUBY
      #!/usr/bin/env ruby

      # frozen_string_literal: true

      require_relative '../recipes_helper'

      recipe = Kitchen::BookRecipe.new(book_short_name: :#{recipe_underscores}) do |doc, resources|
        include Kitchen::Directions

        book = doc.book
        metadata = book.metadata

        book.search('cnx-pi').trash

        # Your recipe code goes here

        BakeFolio.v1(book: book)
      end

      opts = Slop.parse do |slop|
        slop.string '--input', 'Assembled XHTML input file', required: true
        slop.string '--output', 'Baked XHTML output file', required: true
        slop.string '--resources', 'Path to book resources directory', required: false
      end

      puts Kitchen::Oven.bake(
        input_file: opts[:input],
        recipes: [recipe, VALIDATE_OUTPUT],
        output_file: opts[:output],
        resource_dir: opts[:resources] || nil
      )
    RUBY
  )
  FileUtils.chmod('+x', "#{recipe_dir}/bake")
end

ARGV.each do |recipe|
  recipe_dir = "#{Dir.pwd}/lib/recipes/#{recipe}"
  Dir.mkdir(recipe_dir)
  Dir.mkdir("#{recipe_dir}/locales")

  create_initial_locales(recipe_dir)
  create_initial_bake_script(recipe_dir, recipe)
end
