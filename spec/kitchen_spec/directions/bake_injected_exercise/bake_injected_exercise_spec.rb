# frozen_string_literal: true

RSpec.describe Kitchen::Directions::BakeInjectedExercise do
  before do
    stub_locales({
      'context_lead_text': 'Refer to '
    })
  end

  let(:injected_exercise_full) do
    book_containing(html:
      one_chapter_with_one_page_containing(
        <<~HTML
          <div data-type="injected-exercise" data-injected-from-nickname="contmath91" data-injected-from-version="2" data-injected-from-url="url" data-tags="type:practice all" data-is-vocab="False">
            <div data-type="exercise-stimulus">Stimulus text for exercise.</div>
            <div data-type="exercise-context" data-context-module="abc" data-context-feature="def">
              <a class="autogenerated-content" href="#abcdef-test">[link]</a>
            </div>
            <div data-type="exercise-question" data-is-answer-order-important="False" data-formats="free-response">
              placeholder
            </div>
          </div>
        HTML
      )
    ).injected_exercises.first
  end

  let(:injected_exercise_none) do
    book_containing(html:
      one_chapter_with_one_page_containing(
        <<~HTML
          <div data-type="injected-exercise" data-injected-from-nickname="contmath91" data-injected-from-version="2" data-injected-from-url="url" data-tags="type:practice all" data-is-vocab="False">
            <div data-type="exercise-question" data-is-answer-order-important="False" data-formats="free-response">
              placeholder
            </div>
          </div>
        HTML
      )
    ).injected_exercises.first
  end

  let(:injected_exercise_full_with_two_questions) do
    book_containing(html:
      one_chapter_with_one_page_containing(
        <<~HTML
          <div data-type="injected-exercise" data-injected-from-nickname="contmath91" data-injected-from-version="2" data-injected-from-url="url" data-tags="type:practice all" data-is-vocab="False">
            <div data-type="exercise-stimulus">Stimulus text for exercise.</div>
            <div data-type="exercise-context" data-context-module="abc" data-context-feature="def">
              <a class="autogenerated-content" href="#abcdef-test">[link]</a>
            </div>
            <div data-type="exercise-question" data-is-answer-order-important="False" data-formats="free-response">
              placeholder
            </div>
            <div data-type="exercise-question" data-is-answer-order-important="False" data-formats="free-response">
              another placeholder
            </div>
          </div>
        HTML
      )
    ).injected_exercises.first
  end

  let(:injected_exercise_full_with_multipart_questions_with_solutions) do
    book_containing(html:
      one_chapter_with_one_page_containing(
        <<~HTML
          <div data-type="injected-exercise" data-injected-from-nickname="contmath91" data-injected-from-version="2" data-injected-from-url="url" data-tags="type:practice all" data-is-vocab="False">
            <div data-type="exercise-stimulus">Stimulus text for exercise.</div>
            <div data-type="exercise-context" data-context-module="abc" data-context-feature="def">
              <a class="autogenerated-content" href="#abcdef-test">[link]</a>
            </div>
            <div data-type="exercise-question" data-is-answer-order-important="False" data-formats="free-response" id="101">
              <div data-type="question-stem">a question</div>
              <div data-type="question-solution">a solution</div>
            </div>
            <div data-type="exercise-question" data-is-answer-order-important="False" data-formats="free-response" id="102">
              <div data-type="question-stem">a question</div>
              <div data-type="question-solution">a solution</div>
            </div>
          </div>
        HTML
      )
    ).injected_exercises.first
  end

  let(:injected_exercise_full_with_multipart_questions_with_many_solutions) do
    book_containing(html:
      one_chapter_with_one_page_containing(
        <<~HTML
          <div data-type="injected-exercise" data-injected-from-nickname="contmath91" data-injected-from-version="2" data-injected-from-url="url" data-tags="type:practice all" data-is-vocab="False">
            <div data-type="exercise-stimulus">Stimulus text for exercise.</div>
            <div data-type="exercise-context" data-context-module="abc" data-context-feature="def">
              <a class="autogenerated-content" href="#abcdef-test">[link]</a>
            </div>
            <div data-type="exercise-question" data-is-answer-order-important="False" data-formats="free-response" id="101">
              <div data-type="question-stem">a question</div>
              <div data-type="question-solution" data-solution-source="collaborator" data-solution-type="summary">a solution</div>
              <div data-type="question-solution" data-solution-source="collaborator" data-solution-type="detailed">other solution</div>
            </div>
            <div data-type="exercise-question" data-is-answer-order-important="False" data-formats="free-response" id="102">
              <div data-type="question-stem">a question</div>
              <div data-type="question-solution" data-solution-source="collaborator" data-solution-type="summary">a solution</div>
              <div data-type="question-solution" data-solution-source="collaborator" data-solution-type="detailed">other solution</div>
            </div>
            <div data-type="exercise-question" data-is-answer-order-important="False" data-formats="multiple-choice" id="103">
              <div data-type="question-stem">a question</div>
              <ol data-type="question-answers" type="a">
                <li data-type="question-answer" data-correctness="0.0" data-id="668496">
                  <div data-type="answer-content">mean - i'm distractor</div>
                  <div data-type="answer-feedback">choice level feedback</div>
                </li>
                <li data-type="question-answer" data-correctness="0.0" data-id="668497">
                  <div data-type="answer-content">median - distractor</div>
                </li>
                <li data-type="question-answer" data-correctness="1.0" data-id="668498">
                  <div data-type="answer-content">mode - correct answer</div>
                  <div data-type="answer-feedback">choice level feedback</div>
                </li>
                <li data-type="question-answer" data-correctness="0.0" data-id="668499">
                  <div data-type="answer-content">all of the above - distractor</div>
                  <div data-type="answer-feedback">choice level feedback</div>
                </li>
              </ol>
              <div data-type="question-solution" data-solution-source="collaborator" data-solution-type="detailed">other solution</div>
            </div>
          </div>
        HTML
      )
    ).injected_exercises.first
  end

  let(:injected_exercise_full_with_multipart_questions) do
    book_containing(html:
      one_chapter_with_one_page_containing(
        <<~HTML
          <div data-type="injected-exercise" data-injected-from-nickname="contmath91" data-injected-from-version="2" data-injected-from-url="url" data-tags="type:practice all" data-is-vocab="False">
            <div data-type="exercise-stimulus">Stimulus text for exercise.</div>
            <div data-type="exercise-context" data-context-module="abc" data-context-feature="def">
              <a class="autogenerated-content" href="#abcdef-test">[link]</a>
            </div>
            <div data-type="exercise-question" data-is-answer-order-important="False" data-formats="free-response" id="101">
              <div data-type="question-stem">a question</div>
            </div>
            <div data-type="exercise-question" data-is-answer-order-important="False" data-formats="free-response" id="102">
              <div data-type="question-stem">a question</div>
            </div>
          </div>
        HTML
      )
    ).injected_exercises.first
  end

  it 'bakes an exercise with a full set of first-level features' do
    described_class.v1(exercise: injected_exercise_full)
    expect(injected_exercise_full).to match_snapshot_auto
  end

  it 'bakes an exercise without any first-level features' do
    described_class.v1(exercise: injected_exercise_none)
    expect(injected_exercise_none).to match_normalized_html(
      <<~HTML
        <div data-type="injected-exercise" data-injected-from-nickname="contmath91" data-injected-from-version="2" data-injected-from-url="url" data-tags="type:practice all" data-is-vocab="False" data-question-count="1" data-is-multipart="False">
          <div data-type="exercise-question" data-is-answer-order-important="False" data-formats="free-response">
            placeholder
          </div>
        </div>
      HTML
    )
  end

  it 'bakes an exercise with a full set of first-level features and not moves context-exercise' do
    described_class.v1(exercise: injected_exercise_full_with_two_questions)
    expect(injected_exercise_full_with_two_questions).to match_snapshot_auto
  end

  context 'when alphabetical_multiparts is true' do
    it 'bakes an alphabetical multipart question' do
      described_class.v1(
        exercise: injected_exercise_full_with_multipart_questions_with_solutions,
        options: { alphabetical_multiparts: true, list_type: 'lower-alpha', add_brackets: true }
      )
      expect(injected_exercise_full_with_multipart_questions_with_solutions).to match_snapshot_auto
    end

    it 'bakes an alphabetical multipart question with different numbering' do
      described_class.v1(
        exercise: injected_exercise_full_with_multipart_questions_with_solutions,
        options: { alphabetical_multiparts: true, list_type: 'upper-alpha' }
      )
      expect(injected_exercise_full_with_multipart_questions_with_solutions).to match_snapshot_auto
    end

    it 'leaves an exercise without a stimulus alone' do
      described_class.v1(
        exercise: injected_exercise_none,
        options: { alphabetical_multiparts: true, list_type: 'lower-alpha' }
      )
      expect(injected_exercise_none).to match_snapshot_auto
    end

    it 'bakes an alphabetical multipart question without solutions' do
      described_class.v1(
        exercise: injected_exercise_full_with_multipart_questions,
        options: { alphabetical_multiparts: true, list_type: 'lower-alpha', add_brackets: true }
      )
      expect(injected_exercise_full_with_multipart_questions).to match_snapshot_auto
    end

    it 'bakes an alphabetical multipart question with many solutions' do
      described_class.v1(
        exercise: injected_exercise_full_with_multipart_questions_with_many_solutions,
        options: { alphabetical_multiparts: true, list_type: 'lower-alpha', add_brackets: true }
      )
      expect(injected_exercise_full_with_multipart_questions_with_many_solutions).to match_snapshot_auto
    end

    it 'bakes an alphabetical multipart question with suppressing summary' do
      described_class.v1(
        exercise: injected_exercise_full_with_multipart_questions_with_many_solutions,
        options: { alphabetical_multiparts: true, list_type: 'lower-alpha', add_brackets: true, suppress_summary: true }
      )
      expect(injected_exercise_full_with_multipart_questions_with_many_solutions).to match_snapshot_auto
    end
  end
end
