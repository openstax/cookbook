# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Kitchen::NoteElement do
  let(:book_with_valid_note) do
    book_containing(html:
      one_chapter_with_one_page_containing(
        <<~HTML
          <div data-type="note" id="noteId" class="chemistry link-to-learning">
            <p id="pId">Blah</p>
          </div>
        HTML
      ))
  end

  let(:book_with_note_bad_class) do
    book_containing(html:
      one_chapter_with_one_page_containing(
        <<~HTML
          <div data-type="note" id="noteId" class="bad-class">
            <p id="pId">Blah</p>
          </div>
        HTML
      ))
  end

  describe '#autogenerated_title' do
    before do
      stub_locales({
        'notes': {
          'link-to-learning': 'Chemistry',
          'everyday-life': 'Chemistry in Everyday Life'
        }
      })
    end

    context 'when lookup data is present' do
      let(:untitled_note) { book_with_valid_note.notes.first }

      it 'generates the note title' do
        expect(untitled_note.autogenerated_title).to eq 'Chemistry'
      end
    end

    context 'when the key "notes" does not exist under book title' do
      # overwrite current locales with blank hash
      before do
        stub_locales({})
      end

      let(:untitled_note) { book_with_valid_note.notes.first }

      it 'tells you & returns filler' do
        expect($stdout).to receive(:puts).with('An entry for notes does not exist in locales')
        expect(untitled_note.autogenerated_title).to eq '[unknown note title]'
      end
    end

    context 'when title for the given class does not exist' do
      let(:unclassified_note) { book_with_note_bad_class.notes.first }

      it 'tells you & returns filler' do
        expect($stdout).to receive(:puts).with('Title for note with classes ["bad-class"] not found')
        expect(unclassified_note.autogenerated_title).to eq '[unknown note title]'
      end
    end
  end

  describe '#as_enumerator' do
    let(:untitled_note) { book_with_valid_note.notes.first }

    it 'can get its own enumerator' do
      expect(untitled_note.as_enumerator).to be_a Kitchen::NoteElementEnumerator
    end
  end

end
