#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

usage="shorten -b <bookname> -i <inputfile>"

# Get command line arguments

while getopts b:i:h flag
do
  case "${flag}" in
    b) book=${OPTARG} ;;
    i) input_file=${OPTARG} ;;
    h) echo $usage; exit 0 ;;
    *) echo "Unknown flag '${flag}'"; exit 1 ;;
  esac
done

# List additional books here

case "${book}" in
  chemistry) dest="${DIR}/data/chemistry/short" && script="${DIR}/books/chemistry/shorten";;
  *) echo "Unknown book '${book}'"; exit 1;;
esac

# Call the shorten script

echo "Shortening ..."
if [ ! -d $dest ]
then
    mkdir $dest
fi
$script --input $input_file --output $dest/assembled.xhtml

# Bake shortened book with legacy

if [ -e legacy_recipes/$book.css ]
then
    echo "Baking with legacy ..."
    ./bake_legacy -i $dest/assembled.xhtml -r legacy_recipes/$book.css -o $dest/easybaked.xhtml
    # Normalize the easybaked book
    ruby scripts/normalize $dest/easybaked.xhtml
else
    echo "Cannot bake with legacy because legacy_recipes/${book}.css does not exist."
fi

# Bake shortened book with kitchen

if [ -e $DIR/books/$book/bake ]
then
  echo "Baking with kitchen ..."
  ./bake -b $book -i $dest/assembled.xhtml -o $dest/kitchen-baked.xhtml
  # Normalize the kitchen baked book
  ruby scripts/normalize $dest/kitchen-baked.xhtml
else
  echo "Cannot bake with kitchen because books/${book}/bake does not exist."
fi
